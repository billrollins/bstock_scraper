
==================================================
File Path: E:/bstock_scraper/.env
==================================================
# B-Stock Credentials
BSTOCK_EMAIL=bill_rollins.rf@outlook.com
BSTOCK_PASSWORD=9$J8iCVr4Gi7pu2
# Update your .env file with the correct values
DB_HOST=localhost
DB_PORT=5432
DB_NAME=bstock_scraper
DB_USER=bstock_scraper
DB_PASSWORD=bstock_scraper
# Install required packages if not already installed
pip install psycopg2-binary python-dotenv alembic
# Initialize alembic (skip if already done)
alembic init alembic
# Create and run the migration
alembic revision --autogenerate -m "Initial migration"
alembic upgrade head

==================================================
File Path: E:/bstock_scraper/.env.example
==================================================
Environment Files
# .env.example
# B-Stock Credentials
BSTOCK_EMAIL=your_email@example.com
BSTOCK_PASSWORD=your_password
# PostgreSQL Database Configuration
DB_HOST=localhost
DB_PORT=5432
DB_NAME=bstock_scraper
DB_USER=your_db_username
DB_PASSWORD=your_db_password
# Scraping Configuration
REQUESTS_PER_MINUTE=60
CONCURRENT_REQUESTS=5

==================================================
File Path: E:/bstock_scraper/.gitignore
==================================================
venv/
__pycache__/
*.pyc
.env
.pytest_cache/
.coverage
.vscode/
.idea/

==================================================
File Path: E:/bstock_scraper/alembic.ini
==================================================
[alembic]
script_location = alembic
# This will be overridden by env.py
sqlalchemy.url = driver://user:pass@localhost/dbname
[loggers]
keys = root,sqlalchemy,alembic
[handlers]
keys = console
[formatters]
keys = generic
[logger_root]
level = WARN
handlers = console
qualname =
[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine
[logger_alembic]
level = INFO
handlers =
qualname = alembic
[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic
[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S

==================================================
File Path: E:/bstock_scraper/README.md
==================================================
# Project documentation

==================================================
File Path: E:/bstock_scraper/requirements.txt
==================================================
alembic==1.13.3
annotated-types==0.7.0
asttokens==2.4.1
beautifulsoup4==4.12.3
certifi==2024.8.30
chardet==5.2.0
charset-normalizer==3.4.0
colorama==0.4.6
comm==0.2.2
debugpy==1.8.7
decorator==5.1.1
executing==2.1.0
greenlet==3.1.1
idna==3.10
ipykernel==6.29.5
ipython==8.29.0
jedi==0.19.1
jupyter_client==8.6.3
jupyter_core==5.7.2
Mako==1.3.6
MarkupSafe==3.0.2
matplotlib-inline==0.1.7
nest-asyncio==1.6.0
numpy==2.1.3
packaging==24.1
pandas==2.2.3
parso==0.8.4
platformdirs==4.3.6
prompt_toolkit==3.0.48
psutil==6.1.0
psycopg2-binary==2.9.10
pure_eval==0.2.3
pydantic==2.9.2
pydantic_core==2.23.4
Pygments==2.18.0
python-dateutil==2.9.0.post0
python-dotenv==1.0.1
pytz==2024.2
pywin32==308
pyzmq==26.2.0
requests==2.32.3
six==1.16.0
soupsieve==2.6
SQLAlchemy==2.0.36
stack-data==0.6.3
tornado==6.4.1
traitlets==5.14.3
typing_extensions==4.12.2
tzdata==2024.2
urllib3==2.2.3
wcwidth==0.2.13


==================================================
File Path: E:/bstock_scraper/config/__init__.py
==================================================


==================================================
File Path: E:/bstock_scraper/config/settings.py
==================================================
from pydantic_settings import BaseSettings
from typing import Optional
from functools import lru_cache
class Settings(BaseSettings):
# Database settings
DB_HOST: str
DB_PORT: str
DB_NAME: str
DB_USER: str
DB_PASSWORD: str
DATABASE_URL: Optional[str] = None
# B-Stock credentials
BSTOCK_EMAIL: str
BSTOCK_PASSWORD: str
# Scraping settings
REQUESTS_PER_MINUTE: int = 60
CONCURRENT_REQUESTS: int = 5
# Base URLs
AMAZON_BASE_URL: str = "https://bstock.com/amazon"
TARGET_BASE_URL: str = "https://bstock.com/target"
class Config:
env_file = ".env"
def __init__(self, **kwargs):
super().__init__(**kwargs)
if not self.DATABASE_URL:
self.DATABASE_URL = f"postgresql://{self.DB_USER}:{self.DB_PASSWORD}@{self.DB_HOST}:{self.DB_PORT}/{self.DB_NAME}"
@lru_cache()
def get_settings() -> Settings:
return Settings()

==================================================
File Path: E:/bstock_scraper/config/marketplaces/__init__.py
==================================================


==================================================
File Path: E:/bstock_scraper/config/marketplaces/amazon.py
==================================================
# Amazon-specific settings

==================================================
File Path: E:/bstock_scraper/config/marketplaces/target.py
==================================================
# Target-specific settings

==================================================
File Path: E:/bstock_scraper/notebooks/database_notebook.ipynb
==================================================
{
"cells": [
{
"cell_type": "markdown",
"metadata": {},
"source": [
"# Database Exploration\n",
"\n",
"This notebook helps explore and verify our database structure."
]
},
{
"cell_type": "code",
"execution_count": null,
"metadata": {},
"outputs": [],
"source": [
"# Add the project root to Python path so we can import our modules\n",
"import sys\n",
"from pathlib import Path\n",
"project_root = str(Path.cwd().parent)\n",
"if project_root not in sys.path:\n",
"    sys.path.append(project_root)\n",
"\n",
"# Import required modules\n",
"from sqlalchemy import inspect\n",
"from src.storage.database import engine\n",
"\n",
"# Setup prettier display for DataFrames if we need them later\n",
"import pandas as pd\n",
"pd.set_option('display.max_columns', None)\n",
"pd.set_option('display.max_rows', 50)"
]
},
{
"cell_type": "code",
"execution_count": null,
"metadata": {},
"outputs": [],
"source": [
"# Inspect database structure\n",
"inspector = inspect(engine)\n",
"\n",
"# Get all tables\n",
"for table_name in inspector.get_table_names():\n",
"    print(f\"\\nTable: {table_name}\")\n",
"    \n",
"    # Get columns\n",
"    print(\"Columns:\")\n",
"    for column in inspector.get_columns(table_name):\n",
"        print(f\"  - {column['name']}: {column['type']}\")\n",
"    \n",
"    # Get indexes\n",
"    print(\"\\nIndexes:\")\n",
"    for index in inspector.get_indexes(table_name):\n",
"        print(f\"  - {index['name']}: {index['column_names']}\")\n",
"    \n",
"    # Get foreign keys\n",
"    print(\"\\nForeign Keys:\")\n",
"    for fk in inspector.get_foreign_keys(table_name):\n",
"        print(f\"  - {fk['name']}: {fk['referred_table']}\")"
]
},
{
"cell_type": "code",
"execution_count": null,
"metadata": {},
"outputs": [],
"source": [
"# Helper function to query tables\n",
"def get_table_data(table_name, limit=5):\n",
"    \"\"\"Get sample data from a table\"\"\"\n",
"    query = f\"SELECT * FROM {table_name} LIMIT {limit}\"\n",
"    return pd.read_sql(query, engine)\n",
"\n",
"# Example usage:\n",
"# df = get_table_data('auctions')\n",
"# df"
]
}
],
"metadata": {
"kernelspec": {
"display_name": "venv",
"language": "python",
"name": "python3"
},
"language_info": {
"codemirror_mode": {
"name": "ipython",
"version": 3
},
"file_extension": ".py",
"mimetype": "text/x-python",
"name": "python",
"nbconvert_exporter": "python",
"pygments_lexer": "ipython3",
"version": "3.12.0"
}
},
"nbformat": 4,
"nbformat_minor": 2
}

==================================================
File Path: E:/bstock_scraper/prompts/HTML amazon all-inventory.html
==================================================
<!-- https://bstock.com/amazon/ -->
<ul class="products-grid products-grid--max-4-col">
<li id="auction-26964">
<a
href="https://bstock.com/amazon/auction/auction/view/id/26964/"
class="product-image product-image-amz_ov_20241031_006"
>
<img
alt="Auction Image"
src="https://storage.googleapis.com/bfile-prod-assets-img/amz/auto_category/gl_Apparel-small.png"
style=""
/></a>
<div class="product-info" style="min-height: 226px">
<div class="product-name">
<a href="https://bstock.com/amazon/auction/auction/view/id/26964/"
>Est. 2 Pallets of Apparel &amp; More, 974 Units, Used - Good
Condition, Ext. Retail $44,826, North Las Vegas, NV - West Coast
</a>
</div>
<div class="current_bid" id="current_bid_amt26964">
<span class="label">Current bid:</span>
<span class="price"><strong>$2,202</strong></span>
</div>
<div class="cost_per_unit">
<span class="label">Avg. Cost Per Unit: </span>
<span class="price">
<strong> $2.26 </strong>
</span>
</div>
<div class="bids_number">
<span class="label">Bids: </span
><strong><span id="bid_number26964">23</span></strong>
</div>
<div class="time_remaining">
<span class="label"> Closes in </span>
<strong>
<span
id="auction_time_remaining26964"
class="countdown ending-soon"
data-auction-id="26964"
data-end-time="Sat, 02 Nov 2024 14:48:00 -0700"
>1m 5s</span
>
</strong>
</div>
...
</div>
</li>
...
</ul>

==================================================
File Path: E:/bstock_scraper/prompts/HTML amazon auction detail.html
==================================================
<!-- https://bstock.com/amazon/auction/auction/view/id/27096/ -->
<div class="product-essential">
<!-- Auction Title -->
<div class="product-name">
<h1>Est. 2 Pallets of Outdoors by Speedo, Retrospec, Bell &amp; More, 981 Units, Used - Good Condition, Ext. Retail $19,051, North Las Vegas, NV - West Coast</h1>
</div>
<!-- Bid Information -->
<div class="auction-data-row">
<div id="current_bid_label">Current bid</div>
<div class="auction-data-content">
<span id="current_bid_amount">$600</span>
</div>
<span class="auction-actions">
<span id="bid_number">13</span>
<span id="bid_history_label_plural">Bids</span>
</span>
</div>
<!-- Next Minimum Bid -->
<div class="auction-data-row">
<span id="next_current_bid" class="price">$625</span>
</div>
<!-- Shipping Information -->
<div class="auction-data-row">
<div class="auction-data-label">Shipping Cost</div>
<div id="shipping_total_cost">
<span class="price">$262.68</span>
</div>
<div class="softcheckout-address">
<address id="softcheckout-display-address">
<span>8052 H ST, OMAHA, Nebraska 68127-1716</span>
</address>
</div>
</div>
<!-- Per Unit Cost -->
<div class="auction-data-row">
<div class="auction-data-label">Avg. Cost Per Unit</div>
<div id="auction_cost_per_unit">
<span id="unit_per_price_span" class="price">$0.61</span>
</div>
</div>
<!-- Auction End Time -->
<div class="auction-data-row">
<div class="auction-data-label">Closes in</div>
<div class="auction-data-content">
<span id="auction_time_remaining" class="ending-soon">1m 16s</span>
</div>
</div>
<!-- Close Date -->
<div class="auction-data-row">
<div class="auction-data-label">Close Date</div>
<div class="auction-data-content">
<span id="auction_end_time">Sat Nov 2, 2024 5:06:00 PM</span>
<span class="tz_abbr">CDT</span>
</div>
</div>
</div>

==================================================
File Path: E:/bstock_scraper/prompts/HTML target all-inventory.html
==================================================
<!-- https://bstock.com/target/ -->
<ul class="products-grid products-grid--max-4-col">
<li id="auction-119203">
<a
href="https://bstock.com/target/auction/auction/view/id/119203/"
class="product-image product-image-urc_womens_apparel_2_20241031_145_p"
>
<img
alt="Auction Image"
src="https://storage.googleapis.com/bfile-prod-assets-img/tgt/category/67-small.png"
style=""
/></a>
<div class="product-info" style="min-height: 205px">
<div class="product-name">
<a href="https://bstock.com/target/auction/auction/view/id/119203/"
>1 Pallet of Women's Apparel &amp; Accessories by Levi's &amp; More,
Used - Good Condition, 1,085 Units, Ext. Retail $24,050, Upper
Marlboro, MD
</a>
</div>
<div class="current_bid" id="current_bid_amt119203">
<span class="label">Current bid:</span>
<span class="price"><strong>$100</strong></span>
</div>
<div class="cost_per_unit">
<span class="label">Avg. Cost Per Unit: </span>
<span class="price">
<strong> $0.09 </strong>
</span>
</div>
<div class="bids_number">
<span class="label">Bids: </span
><strong><span id="bid_number119203">0</span></strong>
</div>
<div class="time_remaining">
<span class="label"> Closes in </span>
<strong>
<span
id="auction_time_remaining119203"
class="countdown"
data-auction-id="119203"
data-end-time="Sun, 03 Nov 2024 13:00:00 -0600"
>21h 21m</span
>
</strong>
</div>
</div>
</li>
...
</ul>

==================================================
File Path: E:/bstock_scraper/prompts/HTML target auction detail.html
==================================================
<!-- https://bstock.com/target/auction/auction/view/id/119203/ -->
<div class="product-essential">
<!-- Auction Title -->
<div class="product-name">
<h1>
1 Pallet of Women's Apparel &amp; Accessories by Levi's &amp; More, Used -
Good Condition, 1,085 Units, Ext. Retail $24,050, Upper Marlboro, MD
</h1>
</div>
<!-- Bid Information -->
<div class="auction-data-row">
<div id="current_bid_label" class="auction-data-label">Opening bid</div>
<div class="auction-data-content">
<span id="current_bid_amount">$100</span>
</div>
<span class="auction-actions">
<span id="bid_number">0</span>
<span id="bid_history_label_plural">Bids</span>
</span>
</div>
<!-- Additional Fees -->
<div class="auction-data-row">
<div class="auction-data-label">Additional Charges</div>
<div class="auction-data-content">
<span id="buyersPremiumLabelResult">$4.00</span> B-Stock Fee
</div>
</div>
<!-- Shipping Information -->
<div class="auction-data-row">
<div class="auction-data-label">Shipping Cost</div>
<div id="shipping_total_cost">
<span class="price">$370.66</span>
</div>
<!-- Shipping Details -->
<div id="shipping_info">
<div id="auction_origin">Upper Marlboro, MD, 20774</div>
<div id="quote_address_string">8052 H ST, OMAHA, Nebraska 68127-1716</div>
<!-- Additional shipping details -->
<div>Weight: 573.0000 lb.</div>
<div># of pallets: 1</div>
<div>Pallet spaces: 1</div>
</div>
</div>
<!-- Per Unit Cost -->
<div class="auction-data-row">
<div class="auction-data-label">Avg. Cost Per Unit</div>
<div id="auction_cost_per_unit">
<span id="unit_per_price_span" class="price">$0.09</span>
</div>
</div>
<!-- Auction End Time -->
<div class="auction-data-row">
<div class="auction-data-label">Closes in</div>
<div class="auction-data-content">
<span id="auction_time_remaining">21h 2m</span>
</div>
</div>
<!-- Close Date -->
<div class="auction-data-row">
<div class="auction-data-label">Close Date</div>
<div class="auction-data-content">
<span id="auction_end_time">Sun Nov 3, 2024 1:00:00 PM</span>
<span class="tz_abbr">CST</span>
</div>
</div>
</div>

==================================================
File Path: E:/bstock_scraper/scripts/export_data.py
==================================================
# Data export script

==================================================
File Path: E:/bstock_scraper/scripts/run_scraper.py
==================================================
# Main script

==================================================
File Path: E:/bstock_scraper/src/core/__init__.py
==================================================


==================================================
File Path: E:/bstock_scraper/src/core/auth.py
==================================================
# Authentication handling

==================================================
File Path: E:/bstock_scraper/src/core/rate_limiter.py
==================================================
# Rate limiting implementation
import time
from datetime import datetime, timedelta
from collections import deque
from typing import Deque, Optional
import logging
logger = logging.getLogger(__name__)
class RateLimiter:
"""Rate limiter implementation using token bucket algorithm"""
def __init__(self, requests_per_minute: int = 60):
self.requests_per_minute = requests_per_minute
self.window_size = 60  # 1 minute in seconds
self.requests: Deque[datetime] = deque()
async def acquire(self) -> bool:
"""Acquire permission to make a request"""
now = datetime.now()
# Remove requests older than window_size
while self.requests and (now - self.requests[0]).total_seconds() > self.window_size:
self.requests.popleft()
# Check if we can make a new request
if len(self.requests) < self.requests_per_minute:
self.requests.append(now)
return True
# Calculate wait time
wait_time = (self.requests[0] + timedelta(seconds=self.window_size) - now).total_seconds()
if wait_time > 0:
logger.info(f"Rate limit reached, waiting {wait_time:.2f} seconds")
time.sleep(wait_time)
self.requests.popleft()
self.requests.append(datetime.now())
return True
return False

==================================================
File Path: E:/bstock_scraper/src/core/scraper.py
==================================================
# Core scraping functionality

==================================================
File Path: E:/bstock_scraper/src/models/__init__.py
==================================================


==================================================
File Path: E:/bstock_scraper/src/models/auction.py
==================================================
# Auction data model
from dataclasses import dataclass
from datetime import datetime
from typing import Optional
@dataclass
class Auction:
"""Base auction model representing common fields across marketplaces"""
auction_id: str
title: str
current_bid: float
total_units: int
condition: str
retail_value: float
location: str
end_time: datetime
shipping_cost: Optional[float] = None
total_bids: Optional[int] = None
cost_per_unit: Optional[float] = None
marketplace: str
source_url: str
@property
def is_ending_soon(self) -> bool:
"""Check if auction is ending within 1 hour"""
if not self.end_time:
return False
return (self.end_time - datetime.now()).total_seconds() < 3600

==================================================
File Path: E:/bstock_scraper/src/models/marketplace.py
==================================================
# Marketplace configuration model

==================================================
File Path: E:/bstock_scraper/src/models/shipping.py
==================================================
# Shipping details model

==================================================
File Path: E:/bstock_scraper/src/parsers/__init__.py
==================================================


==================================================
File Path: E:/bstock_scraper/src/parsers/amazon_parser.py
==================================================
# Amazon marketplace parser
from typing import List, Optional
from bs4 import BeautifulSoup
from datetime import datetime
from .base_parser import BaseParser
from ..models.auction import Auction
class AmazonParser(BaseParser):
"""Parser implementation for Amazon B-Stock marketplace"""
def parse_auction_list(self, html: str) -> List[Auction]:
soup = BeautifulSoup(html, 'html.parser')
auctions = []
for item in soup.select('li[id^="auction-"]'):
try:
auction_id = item['id'].replace('auction-', '')
title = item.select_one('.product-name a').text.strip()
current_bid = self._parse_price(item.select_one('.current_bid .price strong').text)
cost_per_unit = self._parse_price(item.select_one('.cost_per_unit .price strong').text)
total_bids = int(item.select_one('.bids_number strong span').text)
# Extract end time
end_time_elem = item.select_one('.time_remaining span[data-end-time]')
end_time = self._parse_datetime(end_time_elem['data-end-time']) if end_time_elem else None
# Create auction object
auction = Auction(
auction_id=auction_id,
title=title,
current_bid=current_bid,
total_units=0,  # Will be updated from detail page
condition="",   # Will be updated from detail page
retail_value=0, # Will be updated from detail page
location="",    # Will be updated from detail page
end_time=end_time,
total_bids=total_bids,
cost_per_unit=cost_per_unit,
marketplace="amazon",
source_url=f"https://bstock.com/amazon/auction/auction/view/id/{auction_id}/"
)
auctions.append(auction)
except Exception as e:
logger.error(f"Error parsing auction {auction_id}: {str(e)}")
continue
return auctions
def parse_auction_detail(self, html: str) -> Optional[Auction]:
"""Parse Amazon auction detail page"""
soup = BeautifulSoup(html, 'html.parser')
try:
# Implementation of detail page parsing
pass
except Exception as e:
logger.error(f"Error parsing auction detail: {str(e)}")
return None

==================================================
File Path: E:/bstock_scraper/src/parsers/base_parser.py
==================================================
# Abstract base parser
from abc import ABC, abstractmethod
from typing import List, Optional
from bs4 import BeautifulSoup
from ..models.auction import Auction
class BaseParser(ABC):
"""Abstract base class for marketplace-specific parsers"""
@abstractmethod
def parse_auction_list(self, html: str) -> List[Auction]:
"""Parse auction listing page and return list of auctions"""
pass
@abstractmethod
def parse_auction_detail(self, html: str) -> Optional[Auction]:
"""Parse individual auction detail page"""
pass
def _parse_price(self, price_str: str) -> float:
"""Helper method to parse price strings"""
try:
return float(price_str.replace('$', '').replace(',', '').strip())
except (ValueError, AttributeError):
return 0.0
def _parse_datetime(self, date_str: str) -> Optional[datetime]:
"""Helper method to parse datetime strings"""
try:
return datetime.strptime(date_str.strip(), '%a %b %d, %Y %I:%M:%S %p')
except (ValueError, AttributeError):
return None

==================================================
File Path: E:/bstock_scraper/src/parsers/target_parser.py
==================================================
# Target marketplace parser

==================================================
File Path: E:/bstock_scraper/src/storage/__init__.py
==================================================


==================================================
File Path: E:/bstock_scraper/src/storage/database.py
==================================================
# Database operations
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy.pool import QueuePool
import os
from dotenv import load_dotenv
load_dotenv()
# Database URL construction
DB_USER = os.getenv("DB_USER")
DB_PASSWORD = os.getenv("DB_PASSWORD")
DB_HOST = os.getenv("DB_HOST", "localhost")
DB_PORT = os.getenv("DB_PORT", "5432")
DB_NAME = os.getenv("DB_NAME")
DATABASE_URL = f"postgresql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}"
# SQLAlchemy setup
engine = create_engine(
DATABASE_URL,
poolclass=QueuePool,
pool_size=5,
max_overflow=10,
pool_timeout=30,
pool_pre_ping=True
)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()
# Dependency to get DB session
def get_db():
db = SessionLocal()
try:
yield db
finally:
db.close()
# src/models/database_models.py
from sqlalchemy import Column, Integer, String, Float, DateTime, ForeignKey
from sqlalchemy.orm import relationship
from ..storage.database import Base
from datetime import datetime
class AuctionDB(Base):
__tablename__ = "auctions"
id = Column(Integer, primary_key=True, index=True)
auction_id = Column(String, unique=True, index=True)
marketplace = Column(String, index=True)
title = Column(String)
current_bid = Column(Float)
total_units = Column(Integer)
condition = Column(String)
retail_value = Column(Float)
location = Column(String)
end_time = Column(DateTime)
shipping_cost = Column(Float, nullable=True)
total_bids = Column(Integer, nullable=True)
cost_per_unit = Column(Float, nullable=True)
source_url = Column(String)
created_at = Column(DateTime, default=datetime.utcnow)
updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

==================================================
File Path: E:/bstock_scraper/src/storage/exporters.py
==================================================
# Data export handlers

==================================================
File Path: E:/bstock_scraper/src/utils/__init__.py
==================================================


==================================================
File Path: E:/bstock_scraper/src/utils/http.py
==================================================
# HTTP utilities

==================================================
File Path: E:/bstock_scraper/src/utils/logging.py
==================================================
# Logging configuration
import logging
import sys
from typing import Optional
def setup_logging(level: int = logging.INFO,
log_file: Optional[str] = None) -> None:
"""Configure logging for the application"""
# Create formatter
formatter = logging.Formatter(
'%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
# Setup console handler
console_handler = logging.StreamHandler(sys.stdout)
console_handler.setFormatter(formatter)
# Setup root logger
root_logger = logging.getLogger()
root_logger.setLevel(level)
root_logger.addHandler(console_handler)
# Setup file handler if log file specified
if log_file:
file_handler = logging.FileHandler(log_file)
file_handler.setFormatter(formatter)
root_logger.addHandler(file_handler)

==================================================
File Path: E:/bstock_scraper/src/__init__.py
==================================================


==================================================
File Path: E:/bstock_scraper/tests/__init__.py
==================================================

